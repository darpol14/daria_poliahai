{
	"info": {
		"_postman_id": "8725a184-6fcc-45c4-abdc-4992a59832e2",
		"name": "Test Petstore AQA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22735499"
	},
	"item": [
		{
			"name": "TC 1: Verify Pet Creation",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Pet Details\", function () {",
									"    // Assuming the response contains a JSON representation of the created pet",
									"    const jsonData = pm.response.json();",
									"    // Validate 'id' property",
									"    pm.expect(jsonData.id, 'should be a number').to.be.a('number');",
									"",
									"    // Validate 'category' property and its sub-properties",
									"    pm.expect(jsonData.category, 'should be an object').to.be.an('object');",
									"    pm.expect(jsonData.category.id, 'should be a number').to.be.a('number');",
									"    pm.expect(jsonData.category.name, 'should be a string').to.be.a('string');",
									"",
									"    // Validate 'name' property",
									"    pm.expect(jsonData.name, 'should be a string').to.be.a('string');",
									"",
									"    // Validate 'photoUrls' property and its elements",
									"   pm.expect(jsonData.photoUrls, 'should be an array').to.be.an('array');",
									"    for (var i = 0; i < jsonData.photoUrls.length; i++) {",
									"        pm.expect(jsonData.photoUrls[i], 'photoUrls element should be a string').to.be.a('string');",
									"    }",
									"",
									"    // Validate 'tags' property and its elements",
									"    pm.expect(jsonData.tags, 'should be an array').to.be.an('array');",
									"    for (var i = 0; i < jsonData.tags.length; i++) {",
									"        pm.expect(jsonData.tags[i], 'tags element should be an object').to.be.an('object');",
									"        pm.expect(jsonData.tags[i].id, 'tags element.id should be a number').to.be.a('number');",
									"        pm.expect(jsonData.tags[i].name, 'tags element.name should be a string').to.be.a('string');",
									"    }",
									"",
									"    // Validate 'status' property",
									"    pm.expect(jsonData.status, 'should be a string').to.be.a('string');",
									"",
									"    //Validate defined data in the body request",
									"    pm.expect(jsonData.id).to.eql(743331);",
									"    pm.expect(jsonData.category.id).to.eql(743331);",
									"    pm.expect(jsonData.category.name).to.eql(\"Lolla3\");",
									"    pm.expect(jsonData.name).to.eql(\"doggie\");",
									"    pm.expect(jsonData.photoUrls).to.eql([\"string\"]);",
									"    pm.expect(jsonData.tags[0].id).to.eql(743331);",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Lolla3\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"});",
									"",
									"// Save the created pet ID to be used in the next request",
									"pm.collectionVariables.set(\"createdPetId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "special-key",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 743331,\n  \"category\": {\n    \"id\": 743331,\n    \"name\": \"Lolla3\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 743331,\n      \"name\": \"Lolla3\"\n    }\n  ],\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Retrieved Pet Details\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.id).to.eql(743331);",
									"    pm.expect(jsonData.category.id).to.eql(743331);",
									"    pm.expect(jsonData.category.name).to.eql(\"Lolla3\");",
									"    pm.expect(jsonData.name).to.eql(\"doggie\");",
									"    pm.expect(jsonData.photoUrls).to.eql([\"string\"]);",
									"    pm.expect(jsonData.tags[0].id).to.eql(743331);",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Lolla3\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/{{createdPetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{createdPetId}}"
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "TC 2: Verify Inventory Update",
			"item": [
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"anim90b\": \"<integer>\",\n  \"sit_68\": \"<integer>\",\n  \"do26\": \"<integer>\"\n}"
						}
					]
				},
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Pet Details\", function () {",
									"    ",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Validate 'id' property",
									"    pm.expect(jsonData.id, 'should be a number').to.be.a('number');",
									"",
									" // Validate 'petId' property",
									"    pm.expect(jsonData.petId, 'should be a number').to.be.a('number');",
									"",
									"    // Validate 'quantity' property ",
									"    pm.expect(jsonData.quantity, 'should be a number').to.be.a('number');",
									"   ",
									"",
									"    // Validate 'shipDate' property",
									"    pm.expect(jsonData.shipDate, 'should be a string').to.be.a('string');",
									"",
									"",
									"    // Validate 'status' property ",
									"        pm.expect(jsonData.status, 'should be a string').to.be.a('string');",
									"    ",
									"",
									"    // Validate 'complete' property",
									"    pm.expect(jsonData.complete, 'should be a boolean').to.be.a('boolean')",
									"",
									"    //Validate defined data in the body request",
									"    pm.expect(jsonData.id).to.eql(743331);",
									"    pm.expect(jsonData.petId).to.eql(743331);",
									"    pm.expect(jsonData.quantity).to.eql(1);",
									"    pm.expect(jsonData.shipDate).to.eql(\"2023-11-16T09:14:31.358+0000\");",
									"    pm.expect(jsonData.status).to.eql(\"unavailable\");",
									"    pm.expect(jsonData.complete).to.eql(true);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 743331,\n  \"petId\": 743331,\n  \"quantity\": 1,\n  \"shipDate\": \"2023-11-16T09:14:31.358Z\",\n  \"status\": \"unavailable\",\n  \"complete\": true\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Returns pet inventories by status after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const initialInventory = pm.response.json();",
									"",
									"pm.test(\"Status code is 200 for the second GET request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Updated Inventory Status\", function () {",
									"    var updatedInventory = pm.response.json();",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"anim90b\": \"<integer>\",\n  \"sit_68\": \"<integer>\",\n  \"do26\": \"<integer>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "TC 3: Verify Order Placement",
			"item": [
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify User details\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Validate 'id' property",
									"    pm.expect(jsonData.id, 'should be a number').to.be.a('number');",
									"",
									" // Validate 'petId' property",
									"    pm.expect(jsonData.petId, 'should be a number').to.be.a('number');",
									"",
									"    // Validate 'quantity' property ",
									"    pm.expect(jsonData.quantity, 'should be a number').to.be.a('number');",
									"   ",
									"",
									"    // Validate 'shipDate' property",
									"    pm.expect(jsonData.shipDate, 'should be a string').to.be.a('string');",
									"",
									"",
									"    // Validate 'status' property ",
									"        pm.expect(jsonData.status, 'should be a string').to.be.a('string');",
									"    ",
									"",
									"    // Validate 'complete' property",
									"    pm.expect(jsonData.complete, 'should be a boolean').to.be.a('boolean')",
									"",
									"    //Validate defined data in the body request",
									"    pm.expect(jsonData.id).to.eql(2233440000);",
									"    pm.expect(jsonData.petId).to.eql(743331);",
									"    pm.expect(jsonData.quantity).to.eql(1);",
									"    pm.expect(jsonData.shipDate).to.eql(\"2023-11-16T08:51:44.073+0000\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"    pm.expect(jsonData.complete).to.eql(true);",
									"});",
									"",
									"pm.collectionVariables.set(\"orderId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 2233440000,\n  \"petId\": 743331,\n  \"quantity\": 1,\n  \"shipDate\": \"2023-11-16T08:51:44.073Z\",\n  \"status\": \"available\",\n  \"complete\": true\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/store/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid Order",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find purchase order by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Order details are correct\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"orderId\"));",
									"    pm.expect(jsonData.petId).to.eql(743331);",
									"    pm.expect(jsonData.quantity).to.eql(1);",
									"    pm.expect(jsonData.shipDate).to.eql(\"2023-11-16T08:51:44.073+0000\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"    pm.expect(jsonData.complete).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								"{{orderId}}"
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"approved\",\n  \"complete\": \"<boolean>\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Order not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/store/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "TC 4: Verify User Authentication",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify User details\", function () {",
									"    const jsonData = pm.response.json();",
									"// Validate 'code' property",
									"    pm.expect(jsonData.code, 'should be a number').to.be.a('number');",
									"",
									" // Validate 'type' property",
									"    pm.expect(jsonData.type, 'should be a string').to.be.a('string');",
									"",
									"  // Validate 'message' property  ",
									"    pm.expect(jsonData.message, 'should be a string').to.be.a('string');",
									"    ",
									"    //Validate response values",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");",
									"    pm.expect(jsonData).to.have.property(\"message\", \"6575\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 6575,\n  \"username\": \"cactus123\",\n  \"firstName\": \"Daria\",\n  \"lastName\": \"Poliahai\",\n  \"email\": \"cactus000@gmail.com\",\n  \"password\": \"12345678ABC\",\n  \"phone\": \"3241119900\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify User details\", function () {",
									"    const jsonData = pm.response.json();",
									"// Validate 'code' property",
									"    pm.expect(jsonData.code, 'should be a number').to.be.a('number');",
									"",
									"// Validate 'type' property",
									"    pm.expect(jsonData.type, 'should be a string').to.be.a('string');",
									"",
									"  // Validate 'message' property  ",
									"    pm.expect(jsonData.message, 'should be a string').to.be.a('string');",
									"",
									"",
									"    //Validate response values",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");",
									"    pm.expect(jsonData).to.have.property(\"message\", \"logged in user session:?\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=cactus123&password=12345678ABC",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "cactus123",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "12345678ABC",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The user name for login"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password for login in clear text"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "X-Expires-After",
									"value": "<dateTime>",
									"description": {
										"content": "date in UTC when token expires",
										"type": "text/plain"
									}
								},
								{
									"key": "X-Rate-Limit",
									"value": "<integer>",
									"description": {
										"content": "calls per hour allowed by the user",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "<string>"
						},
						{
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "<string>",
											"description": "(Required) The user name for login"
										},
										{
											"key": "password",
											"value": "<string>",
											"description": "(Required) The password for login in clear text"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Pet Deletion",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Pet Details\", function () {",
									"    // Assuming the response contains a JSON representation of the created pet",
									"    const jsonData = pm.response.json();",
									"    // Validate 'id' property",
									"    pm.expect(jsonData.id, 'should be a number').to.be.a('number');",
									"",
									"    // Validate 'category' property and its sub-properties",
									"    pm.expect(jsonData.category, 'should be an object').to.be.an('object');",
									"    pm.expect(jsonData.category.id, 'should be a number').to.be.a('number');",
									"    pm.expect(jsonData.category.name, 'should be a string').to.be.a('string');",
									"",
									"    // Validate 'name' property",
									"    pm.expect(jsonData.name, 'should be a string').to.be.a('string');",
									"",
									"    // Validate 'photoUrls' property and its elements",
									"   pm.expect(jsonData.photoUrls, 'should be an array').to.be.an('array');",
									"    for (var i = 0; i < jsonData.photoUrls.length; i++) {",
									"        pm.expect(jsonData.photoUrls[i], 'photoUrls element should be a string').to.be.a('string');",
									"    }",
									"",
									"    // Validate 'tags' property and its elements",
									"    pm.expect(jsonData.tags, 'should be an array').to.be.an('array');",
									"    for (var i = 0; i < jsonData.tags.length; i++) {",
									"        pm.expect(jsonData.tags[i], 'tags element should be an object').to.be.an('object');",
									"        pm.expect(jsonData.tags[i].id, 'tags element.id should be a number').to.be.a('number');",
									"        pm.expect(jsonData.tags[i].name, 'tags element.name should be a string').to.be.a('string');",
									"    }",
									"",
									"    // Validate 'status' property",
									"    pm.expect(jsonData.status, 'should be a string').to.be.a('string');",
									"",
									"    //Validate defined data in the body request",
									"    pm.expect(jsonData.id).to.eql(743331);",
									"    pm.expect(jsonData.category.id).to.eql(743331);",
									"    pm.expect(jsonData.category.name).to.eql(\"Lolla3\");",
									"    pm.expect(jsonData.name).to.eql(\"doggie\");",
									"    pm.expect(jsonData.photoUrls).to.eql([\"string\"]);",
									"    pm.expect(jsonData.tags[0].id).to.eql(743331);",
									"    pm.expect(jsonData.tags[0].name).to.eql(\"Lolla3\");",
									"    pm.expect(jsonData.status).to.eql(\"available\");",
									"});",
									"",
									"// Save the created pet ID to be used in the next request",
									"pm.collectionVariables.set(\"createdPetId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "special-key",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 743331,\n  \"category\": {\n    \"id\": 743331,\n    \"name\": \"Lolla3\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 743331,\n      \"name\": \"Lolla3\"\n    }\n  ],\n  \"status\": \"available\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": [
						{
							"name": "Invalid input",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pet",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet"
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deletes a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify Pet's deletion\", function () {",
									"    const jsonData = pm.response.json();",
									"// Validate 'code' property",
									"    pm.expect(jsonData.code, 'should be a number').to.be.a('number');",
									"",
									" // Validate 'type' property",
									"    pm.expect(jsonData.type, 'should be a string').to.be.a('string');",
									"",
									"  // Validate 'message' property  ",
									"    pm.expect(jsonData.message, 'should be a string').to.be.a('string');",
									"    ",
									"    //Validate response values",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");",
									"    pm.expect(jsonData).to.have.property(\"message\", \"743331\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/{{createdPetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{createdPetId}}"
							]
						}
					},
					"response": [
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "api_key",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Find pet by ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Verify Pet's deletion\", function () {",
									"    const jsonData = pm.response.json();",
									"// Validate 'code' property",
									"    pm.expect(jsonData.code, 'should be a number').to.be.a('number');",
									"",
									" // Validate 'type' property",
									"    pm.expect(jsonData.type, 'should be a string').to.be.a('string');",
									"",
									"  // Validate 'message' property  ",
									"    pm.expect(jsonData.message, 'should be a string').to.be.a('string');",
									"    ",
									"    //Validate response values",
									"    pm.expect(jsonData).to.have.property(\"code\", 1);",
									"    pm.expect(jsonData).to.have.property(\"type\", \"error\");",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Pet not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/{{createdPetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"{{createdPetId}}"
							]
						},
						"description": "Returns a single pet"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"<string>\",\n  \"photoUrls\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"id\": \"<long>\",\n  \"category\": {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"sold\"\n}"
						},
						{
							"name": "Invalid ID supplied",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Pet not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "api_key",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/:petId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										":petId"
									],
									"variable": [
										{
											"key": "petId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "createdPetId",
			"value": "743330",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}